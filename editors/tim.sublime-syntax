%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - timl
scope: source.tim
variables:
  ident: '[A-Za-z_][A-Za-z_0-9]*'
  html_id: '[a-zA-Z_-][a-zA-Z0-9_-]*'
contexts:

  main:
    - include: javascript
    - include: json
    - include: yaml
    - include: sass

    - match: '@include'
      scope: keyword.control.import.timl

    - match: '@view'
      scope: entity.name.function.timl

    - match: '(@mixin)\s([\w+-]*)(\((.*)?\))'
      captures:
        1: entity.name.function.tim
        2: entity.name.namespace.tim

    - match: '\b(true|false)\b'
      scope: constant.language.timl

    - match: '\b(if|elif|else|for|in)\b'
      scope: keyword.control.timl

    - match: (\$)([a-zA-Z_][a-zA-Z0-9_]*)\b
      scope: variable.member.timl

    - match: (\.)({{html_id}})\b
      captures:
        2: keyword.control

    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.timl
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.tim
      push: line_comment

    - match: '>'
      scope: markup.bold

    - match: '\|'
      scope: markup.bold keyword.operator.logical

    - match: '(:|\.)'
      scope: markup.bold

    - match: '='
      scope: markup.bold keyword.operator.assignment.timl

    - match: '\*'
      scope: entity.name.tag

    - match: '\b(html|head|meta|script|body|title)\b'
      scope: entity.name.tag.timl

    - match: '\b(main|section|article|aside|div|footer|header)\b'
      scope: entity.name.tag.timl

    - match: '\b(h1|h2|h3|h4|h5|h6|a|p|em|b|strong|span|u)\b'
      scope: entity.name.type.text.timl

    - match: '\b(table|tbody|td|tfoot|th|thead|tr)\b'
      scope: entity.name.tag.table.timl

    - match: '\b(area|base|br|col|embed|hr|img|input|link|meta|param|source|track|wbr)\b'
      scope: entity.name.tag.selfclosing.timl

    - match: '\b(button|label|select|textarea|legend|datalist|output|option|optgroup)\b'
      scope: entity.name.tag.form.timl

    - match: '\b(ul|ol|dl|dt|dd|li)\b'
      scope: entity.name.tag.list.timl

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.tim

  double_quoted_string:
    - meta_scope: string.quoted.double.tim
    - match: '\\.'
      scope: constant.character.escape.tim
    - match: '"'
      scope: punctuation.definition.string.end.tim
      pop: true

  line_comment:
    - meta_scope: comment.line.tim
    - match: $
      pop: true

  javascript:
    - match: (```)(javascript)
      scope: meta.tag.tim
      captures:
        1: punctuation.definition.tag.begin.tim
        2: markup.bold.tim
      embed: scope:source.js
      embed_scope: meta.tag.tim
      escape: (^(\s*)?(```))
      escape_captures:
        0: meta.tag.tim punctuation.definition.tag.end.tim

  json:
    - match: (```)(json)
      scope: meta.tag.tim
      captures:
        1: punctuation.definition.tag.begin.tim
        2: markup.bold.tim
      embed: scope:source.json
      embed_scope: meta.tag.tim
      escape: (^(\s*)?(```))
      escape_captures:
        0: meta.tag.tim punctuation.definition.tag.end.tim

  yaml:
    - match: (```)(yaml)(#({{html_id}}))
      scope: meta.tag.tim
      captures:
        1: punctuation.definition.tag.begin.tim
        3: markup.bold.tim 
      embed: scope:source.yaml
      embed_scope: meta.tag.tim
      escape: (^(\s*)?(```))
      escape_captures:
        0: meta.tag.tim punctuation.definition.tag.end.tim

  sass:
    - match: (```)(sass)
      scope: meta.tag.tim
      captures:
        1: punctuation.definition.tag.begin.tim
        2: keyword.declaration.tim
      embed: scope:source.sass
      embed_scope: meta.tag.tim
      escape: (^(\s*)?(```))
      escape_captures:
        0: meta.tag.tim punctuation.definition.tag.end.tim